{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ONE basic commands\n",
    "\n",
    "There are four main ONE methods that can be used to search for and download data. Here we provide an introduction to these commands using some simple example implementations. Before proceeding make sure that you have installed the [IBL python environment](../../02_installation.md) and set up your [ONE credentials](../../one_docs/one_credentials.md)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Importing ONE\n",
    "To use ONE, we must first import the module and instantiate the ONE class. This can be done using the following commands\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Connected to https://alyx.internationalbrainlab.org as mayo"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "from oneibl.one import ONE\n",
    "one = ONE()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "\n",
    "Note\n",
    "\n",
    "If you are trying to connect through your personal IP address you may recieve the following error\n",
    "\n",
    "```\n",
    "ConnectionError: Can't connect to https://alyx.internationalbrainlab.org.\n",
    "IP addresses are filtered on IBL database servers.\n",
    "Are you connecting from an IBL participating institution ?\n",
    "```\n",
    "If so, make sure you VPN into an IBL institution network\n",
    "\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Searching for data\n",
    "\n",
    "Each experimental session is identified by a unique string known as an experiment ID (eID). To search for experiments, we can use the `one.search` command. This will return a list of eIDs that match the search criterion. \n",
    "\n",
    "The possible searchable fields can be listed using the method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['dataset_types',\n",
       " 'date_range',\n",
       " 'lab',\n",
       " 'location',\n",
       " 'number',\n",
       " 'performance_gte',\n",
       " 'performance_lte',\n",
       " 'project',\n",
       " 'subject',\n",
       " 'task_protocol',\n",
       " 'users']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "one.search_terms()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's search for the experiments performed with the subject KS022 on the 10 December 2019"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "experiment ID = a3df91c8-52a6-4afa-957b-3479a7d0897c"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "eid = one.search(subject='KS022', date_range=['2019-12-10', '2019-12-10'])[0]\n",
    "print(f\"experiment ID = {eid}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get more information about the returned sessions, we can add in a `details` flag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"subject\": \"KS022\",\n",
      "    \"start_time\": \"2019-12-10T14:40:57.879000\",\n",
      "    \"number\": 1,\n",
      "    \"lab\": \"cortexlab\",\n",
      "    \"project\": \"carandiniharris_midbrain_ibl\",\n",
      "    \"url\": \"https://alyx.internationalbrainlab.org/sessions/a3df91c8-52a6-4afa-957b-3479a7d0897c\",\n",
      "    \"task_protocol\": \"_iblrig_tasks_ephysChoiceWorld6.1.3\",\n",
      "    \"local_path\": \"C:\\\\Users\\\\Mayo\\\\Downloads\\\\FlatIron\\\\cortexlab\\\\Subjects\\\\KS022\\\\2019-12-10\\\\001\"\n",
      "}"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "eids, ses_info = one.search(subject='KS022', date_range=['2019-12-10', '2019-12-10'], details=True)\n",
    "eid = eids[0]\n",
    "\n",
    "from ibllib.misc import pprint\n",
    "pprint(ses_info[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Listing available data\n",
    "\n",
    "Once the eID of the session of interest is known, we can list the available datasets using the `one.list` command"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['_iblrig_codeFiles.raw',\n",
       " '_iblrig_taskSettings.raw',\n",
       " 'trials.response_times',\n",
       " 'clusters.channels',\n",
       " 'spikes.depths',\n",
       " '_spikeglx_sync.times',\n",
       " 'spikes.depths',\n",
       " 'clusters.amps',\n",
       " 'trials.goCueTrigger_times',\n",
       " 'clusters.waveforms',\n",
       " 'channels.localCoordinates',\n",
       " 'ephysData.raw.sync',\n",
       " '_iblrig_encoderTrialInfo.raw',\n",
       " '_phy_spikes_subset.waveforms',\n",
       " '_spikeglx_sync.channels',\n",
       " 'clusters.waveformsChannels',\n",
       " 'ephysData.raw.meta',\n",
       " 'wheel.position',\n",
       " 'trials.stimOn_times',\n",
       " 'trials.probabilityLeft',\n",
       " 'templates.amps',\n",
       " 'camera.times',\n",
       " 'probes.trajectory',\n",
       " 'spikes.clusters',\n",
       " 'channels.localCoordinates',\n",
       " '_iblqc_ephysSpectralDensity.freqs',\n",
       " 'templates.waveforms',\n",
       " 'probes.description',\n",
       " 'trials.goCue_times',\n",
       " 'clusters.uuids',\n",
       " '_iblqc_ephysTimeRms.rms',\n",
       " 'ephysData.raw.ch',\n",
       " '_iblqc_ephysSpectralDensity.freqs',\n",
       " 'ephysData.raw.ap',\n",
       " '_iblqc_ephysSpectralDensity.freqs',\n",
       " 'templates.waveformsChannels',\n",
       " 'ephysData.raw.meta',\n",
       " 'ephysData.raw.meta',\n",
       " '_iblrig_Camera.timestamps',\n",
       " 'ephysData.raw.meta',\n",
       " '_iblrig_Camera.raw',\n",
       " 'trials.itiDuration',\n",
       " 'camera.times',\n",
       " 'clusters.waveformsChannels',\n",
       " '_iblqc_ephysTimeRms.timestamps',\n",
       " 'clusters.depths',\n",
       " '_iblqc_ephysTimeRms.timestamps',\n",
       " '_phy_spikes_subset.spikes',\n",
       " '_iblrig_Camera.raw',\n",
       " 'trials.stimOff_times',\n",
       " 'spikes.times',\n",
       " 'clusters.uuids',\n",
       " 'ephysData.raw.ap',\n",
       " 'ephysData.raw.meta',\n",
       " 'wheelMoves.intervals',\n",
       " 'templates.waveformsChannels',\n",
       " '_iblqc_ephysTimeRms.timestamps',\n",
       " '_iblqc_ephysTimeRms.rms',\n",
       " '_iblqc_ephysTimeRms.timestamps',\n",
       " '_iblrig_encoderEvents.raw',\n",
       " 'spikes.templates',\n",
       " 'ephysData.raw.sync',\n",
       " 'clusters.waveforms',\n",
       " '_iblrig_Camera.timestamps',\n",
       " 'trials.contrastLeft',\n",
       " '_spikeglx_sync.channels',\n",
       " 'spikes.amps',\n",
       " 'ephysData.raw.nidq',\n",
       " '_spikeglx_sync.channels',\n",
       " 'trials.feedback_times',\n",
       " '_phy_spikes_subset.waveforms',\n",
       " 'ephysData.raw.ch',\n",
       " '_spikeglx_sync.times',\n",
       " '_iblqc_ephysTimeRms.rms',\n",
       " 'spikes.times',\n",
       " '_spikeglx_sync.polarities',\n",
       " 'spikes.samples',\n",
       " 'clusters.peakToTrough',\n",
       " 'spikes.amps',\n",
       " 'templates.amps',\n",
       " 'spikes.samples',\n",
       " 'ephysData.raw.ch',\n",
       " '_spikeglx_sync.times',\n",
       " 'camera.dlc',\n",
       " 'camera.dlc',\n",
       " 'trials.firstMovement_times',\n",
       " 'trials.feedbackType',\n",
       " 'clusters.metrics',\n",
       " 'trials.intervals',\n",
       " 'ephysData.raw.wiring',\n",
       " 'channels.rawInd',\n",
       " 'ephysData.raw.ch',\n",
       " '_iblqc_ephysTimeRms.rms',\n",
       " 'wheelMoves.peakAmplitude',\n",
       " 'trials.choice',\n",
       " '_phy_spikes_subset.spikes',\n",
       " 'templates.waveforms',\n",
       " 'camera.times',\n",
       " '_phy_spikes_subset.channels',\n",
       " 'ephysData.raw.ch',\n",
       " '_iblrig_Camera.raw',\n",
       " 'ephysData.raw.lf',\n",
       " 'channels.rawInd',\n",
       " 'wheel.timestamps',\n",
       " '_spikeglx_sync.polarities',\n",
       " '_iblrig_ambientSensorData.raw',\n",
       " '_iblqc_ephysSpectralDensity.power',\n",
       " 'clusters.channels',\n",
       " '_iblqc_ephysSpectralDensity.power',\n",
       " 'clusters.metrics',\n",
       " 'wheel.timestamps',\n",
       " '_spikeglx_sync.polarities',\n",
       " 'trials.intervals',\n",
       " 'spikes.templates',\n",
       " 'clusters.amps',\n",
       " 'ephysData.raw.wiring',\n",
       " '_iblqc_ephysSpectralDensity.power',\n",
       " 'trials.rewardVolume',\n",
       " 'kilosort.whitening_matrix',\n",
       " 'ephysData.raw.wiring',\n",
       " '_iblqc_ephysSpectralDensity.power',\n",
       " 'clusters.peakToTrough',\n",
       " 'ephysData.raw.timestamps',\n",
       " 'kilosort.whitening_matrix',\n",
       " '_iblqc_ephysSpectralDensity.freqs',\n",
       " '_iblrig_Camera.timestamps',\n",
       " '_phy_spikes_subset.channels',\n",
       " 'ephysData.raw.lf',\n",
       " 'ephysData.raw.timestamps',\n",
       " '_iblrig_taskData.raw',\n",
       " 'clusters.depths',\n",
       " 'trials.contrastRight',\n",
       " 'spikes.clusters',\n",
       " '_iblrig_encoderPositions.raw']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "one.list(eid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can set the `details` flag to True to return more information about each dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_details = one.list(eid, details=True)\n",
    "data_details[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Loading data\n",
    "\n",
    "Once we have information about the session eID and the list of available dataset types we can use the `one.load` function to download the data from FlatIron. Let's download the `clusters.amps` and `clusters.depths` datasets\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset_types = ['clusters.amps', 'clusters.depths']\n",
    "amps0, depths0, amps1, depths1 = one.load(eid, dataset_types=dataset_types)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "\n",
    "Note\n",
    "\n",
    "Loading `clusters.amps` and `clusters.depths` returned four variables. This is because there is electrophysiology data for two different probes for this session.\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To find out more details about what is being downloaded we can return a data class that contains information about each of the downloaded datasets. This can be added by setting the `dclass_output` argument to True. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = one.load(eid, dataset_types=dataset_types, dclass_output=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have access to the following information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['dataset_type', 'dataset_id', 'local_path', 'eid', 'url', 'data', 'hash', 'file_size'])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.__dict__.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For example if we look at the local_path we will see that the data has come from two different probes, `probe00` and `probe01`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[WindowsPath('C:/Users/Mayo/Downloads/FlatIron/cortexlab/Subjects/KS022/2019-12-10/001/alf/probe01/clusters.depths.npy'),\n",
       " WindowsPath('C:/Users/Mayo/Downloads/FlatIron/cortexlab/Subjects/KS022/2019-12-10/001/alf/probe01/clusters.amps.npy'),\n",
       " WindowsPath('C:/Users/Mayo/Downloads/FlatIron/cortexlab/Subjects/KS022/2019-12-10/001/alf/probe00/clusters.amps.npy'),\n",
       " WindowsPath('C:/Users/Mayo/Downloads/FlatIron/cortexlab/Subjects/KS022/2019-12-10/001/alf/probe00/clusters.depths.npy')]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.local_path"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "\n",
    "Tip\n",
    "\n",
    "To find out more information about the ONE functions and the arguments that can be parsed we can use the help command. For example we can type\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on method load in module oneibl.one:\n",
      "\n",
      "load(eid, dataset_types=None, dclass_output=False, dry_run=False, cache_dir=None, download_only=False, clobber=False, offline=False, keep_uuid=False) method of oneibl.one.OneAlyx instance\n",
      "    From a Session ID and dataset types, queries Alyx database, downloads the data\n",
      "    from Globus, and loads into numpy array.\n",
      "    \n",
      "    :param eid: Experiment ID, for IBL this is the UUID of the Session as per Alyx\n",
      "     database. Could be a full Alyx URL:\n",
      "     'http://localhost:8000/sessions/698361f6-b7d0-447d-a25d-42afdef7a0da' or only the UUID:\n",
      "     '698361f6-b7d0-447d-a25d-42afdef7a0da'. Can also be a list of the above for multiple eids.\n",
      "    :type eid: str\n",
      "    :param dataset_types: [None]: Alyx dataset types to be returned.\n",
      "    :type dataset_types: list\n",
      "    :param dclass_output: [False]: forces the output as dataclass to provide context.\n",
      "    :type dclass_output: bool\n",
      "     If None or an empty dataset_type is specified, the output will be a dictionary by default.\n",
      "    :param cache_dir: temporarly overrides the cache_dir from the parameter file\n",
      "    :type cache_dir: str\n",
      "    :param download_only: do not attempt to load data in memory, just download the files\n",
      "    :type download_only: bool\n",
      "    :param clobber: force downloading even if files exists locally\n",
      "    :type clobber: bool\n",
      "    :param keep_uuid: keeps the UUID at the end of the filename (defaults to False)\n",
      "    :type keep_uuid: bool\n",
      "    \n",
      "    :return: List of numpy arrays matching the size of dataset_types parameter, OR\n",
      "     a dataclass containing arrays and context data.\n",
      "    :rtype: list, dict, dataclass SessionDataInfo\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "help(one.load)"
   ]
  }
 ],
 "metadata": {
  "docs_executed": "executed",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}